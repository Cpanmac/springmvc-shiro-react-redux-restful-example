<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
        xmlns = "http://www.springframework.org/schema/beans"
        xsi:schemaLocation = "http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd">
    <import resource = "spring-mvc.xml"/>

    <bean id = "ehcacheManager" class = "org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name = "configLocation" value = "classpath:ehcache.xml"/>
    </bean>

    <bean id = "springCacheManager" class = "org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name = "cacheManager" ref = "ehcacheManager"/>
    </bean>

    <bean id = "cacheManager" class = "cn.oneayst.shiro.spring.SpringCacheManagerWrapper">
        <property name = "cacheManager" ref = "springCacheManager"/>
    </bean>

    <!--
        hashAlgorithName必须设置, 可以使用MD5或者SHA-1， 对安全性有更高要求的可以使用SHA-256或者更高的算法
        MD5 storedCredentialsHexEncoded默认值是true, 此时密码加密用的是Hex编码, false使用Base64编码
     -->
    <bean id = "credentialsMatcher" class = "cn.oneayst.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref = "cacheManager"/>
        <property name = "hashAlgorithmName" value = "md5"/>
        <property name = "hashIterations" value = "2"/>
        <property name = "storedCredentialsHexEncoded" value = "true"/>
    </bean>

    <!-- 使用自定义Realm -->
    <!--<bean id = "myRealm" class = "cn.oneayst.shiro.realm.MyRealm">
        <property name = "credentialsMatcher" ref = "credentialsMatcher"/>
        <property name = "cachingEnabled" value = "true"/>
        <property name = "userService" ref = "userService"/>
    </bean>-->
    <bean id = "restRealm" class = "cn.oneayst.shiro.realm.RestRealm">
        <property name = "credentialsMatcher" ref = "credentialsMatcher"/>
        <property name = "cachingEnabled" value = "true"/>
        <property name = "authenticationCachingEnabled" value = "true"/>
        <property name = "authenticationCacheName" value = "shiroCache"/>
        <property name = "authorizationCachingEnabled" value = "true"/>
        <property name = "authorizationCacheName" value = "shiroCache"/>
        <property name = "userService" ref = "userService"/>
    </bean>

    <!-- 使用自定义subjectFactory -->
    <bean id = "restSubjectFactory" class = "cn.oneayst.shiro.subject.RestSubjectFactory"/>

    <!-- 配置凭证匹配器 -->
    <bean id = "securityManager" class = "org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name = "realm" ref = "restRealm"/>
        <property name = "subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value = "false"/>
        <property name = "subjectFactory" ref = "restSubjectFactory"/>
        <property name = "sessionManager" ref = "sessionManager"/>
        <property name = "cacheManager" ref = "cacheManager"/>
        <property name = "rememberMeManager">
            <null/>
        </property>
    </bean>

    <bean class = "org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name = "staticMethod" value = "org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name = "arguments" ref = "securityManager"/>
    </bean>
    <!--<bean class = "org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
    <!--<property name = "securityManager" ref = "securityManager"/>-->
    <!--</bean>-->

    <bean id = "restAuthcFilter" class = "cn.oneayst.shiro.filter.RestAuthcFilter"/>

    <bean id = "shiroFilter" class = "org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name = "securityManager" ref = "securityManager"/>
        <property name = "filterChainDefinitions">
            <value>
                /favicon.ico = anon
                /login = anon
                /app/** = anon
                /project/** = restAuthcFilter
                /module/** = restAuthcFilter
                /material/** = restAuthcFilter
                /sp/** = restAuthcFilter
                /brand/** = restAuthcFilter
                /order/** = restAuthcFilter
                /user/** = restAuthcFilter
                /temp.json = restAuthcFilter
                /nav.json = restAuthcFilter
            </value>
        </property>
    </bean>

    <!--<property name = "filterChainDefinitionMap" ref = "chainDifinisionSectionMetaSource"/>
    <bean id = "chainDifinisionSectionMetaSource" class = "cn.oneayst.shiro.ChainDefinitionSectionMetaSource">
        <property name = "filterChainDefinitions">
            <value>
                /app/** = anon
                /favicon.ico = anon
                /login = anon
                /exit = logout
            </value>
        </property>
    </bean>-->

    <!-- 会话ID生成器 -->
    <!--<bean id = "sessionIdGenerator" class = "org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>-->

    <!--<bean id = "sessionDAO" class = "org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name = "activeSessionsCacheName" value = "shiro-activeSessionCache"/>
        <property name = "sessionIdGenerator" ref = "sessionIdGenerator"/>
    </bean>-->

    <bean id = "sessionManager" class = "org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 在rest环境下不会产生session, 所以不需要开启会话验证 -->
        <property name = "sessionValidationSchedulerEnabled" value = "false"/>
        <property name = "sessionIdCookieEnabled" value = "false"/>
        <!-- 在rest环境下不会产生session, 所以关于session的东西不需要设置 -->
        <!--<property name = "globalSessionTimeout" value = "18000000"/>
        <property name = "deleteInvalidSessions" value = "true"/>-->
        <!--<property name = "sessionValidationScheduler" ref = "sessionValidationScheduler"/>-->
        <!--<property name = "sessionDAO" ref = "sessionDAO"/>-->
    </bean>

    <!--<bean id = "sessionValidationScheduler" class = "org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name = "sessionValidationInterval" value = "1800000"/>
        <property name = "sessionManager" ref = "sessionManager"/>
    </bean>-->

    <bean id = "lifecycleBeanPostProcessor" class = "org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>